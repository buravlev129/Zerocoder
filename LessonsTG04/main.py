import asyncio

from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery

from config import TOKEN
from keyboards import kbd_reply_markup, inline_keyboard, create_salad_keyboard, create_vegetable_keyboard, get_vegetable_name


bot = Bot(token=TOKEN)
dp = Dispatcher()


@dp.message(Command("help"))
async def help(message: Message):
    bf = """
    –ö–æ–º–∞–Ω–¥—ã:
    /start    - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
    /links    - –°—Å—ã–ª–∫–∏ –Ω–∞ —Ä–µ—Ü–µ–ø—Ç—ã
    /dynamic  - –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏
    /help     - –ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
    """
    await message.answer(bf)


@dp.message(CommandStart())
async def start(message: Message):
    await message.answer("–¢–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏", reply_markup=kbd_reply_markup)


@dp.message(F.text == "–ü—Ä–∏–≤–µ—Ç üëã")
async def hello(message: Message):
    username = message.from_user.username
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {username}!")

@dp.message(F.text == "–ü–æ–∫–∞ ‚úãüèº")
async def Goodby(message: Message):
    username = message.from_user.username
    await message.answer(f"–î–æ —Å–≤–∏–¥–∞–Ω–∏—è, {username}!")


@dp.message(Command("links"))
async def get_links(message: Message):
    await message.answer("URL-—Å—Å—ã–ª–∫–∏", reply_markup=inline_keyboard)


@dp.message(Command("dynamic"))
async def get_dynamic(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–≤–æ—â", reply_markup=create_vegetable_keyboard())


@dp.callback_query(lambda query: query.data.startswith("vegetable:"))
async def show_salads(query: CallbackQuery):
    key = query.data.split(":")[1]
    name = get_vegetable_name(key)
    await query.message.edit_text(f"–°–∞–ª–∞—Ç—ã –∏–∑ {name}:", reply_markup=create_salad_keyboard(key))


@dp.callback_query(lambda query: query.data == "back_to_menu")
async def back_to_menu(query: CallbackQuery):
    await query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ–≤–æ—â:", reply_markup=create_vegetable_keyboard())


@dp.callback_query(lambda query: query.data.startswith("salad:"))
async def show_salad_info(query: CallbackQuery):
    salad = query.data.split(":")[1]
    await query.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {salad}", show_alert=True)



@dp.message(Command("help"))
async def help(message: Message):
    bf = """
    –ö–æ–º–∞–Ω–¥—ã:
    /start    - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
    /links    - URL-—Å—Å—ã–ª–∫–∏
    /dynamic  - –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    /help     - –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
    """
    await message.answer(bf)


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
